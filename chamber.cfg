[gcode_macro CHAMBER]
description: "If a heater exists for active heating, sets target temp with param TEMP."
gcode:
  {% set temp = params.TEMP|default(0.0)|float %}
  {% if 'heater_generic chamber' in printer %}
	{action_respond_info("SET_HEATER_TEMPERATURE chamber: {0}".format(temp))}
    SET_HEATER_TEMPERATURE HEATER=chamber TARGET={temp}
  {% else %}
    {action_respond_info("heater_generic chamber does not exist")}
  {% endif %}
  

##UPDATE_DELAYED_GCODE ID=CHAMBER_COOLDOWN DURATION=0
[delayed_gcode CHAMBER_COOLDOWN]
description: "Checks that the printers chamber temp and bed temp are below set thresholds from global_vars."
gcode:
  {% set chamber_run_count = printer["gcode_macro CHAMBER_REPORT"].chamber_run_count %}
  {% set exhaust_delay = printer["gcode_macro CHAMBER_REPORT"].exhaust_delay %}
  {% set exhaust_off_bed = printer["gcode_macro global_vars"].exhaust_off_bed|default(40.0)|float %}
  {% set exhaust_off_chamber = printer["gcode_macro global_vars"].exhaust_off_chamber|default(35.0)|float %}
  {% set exhaust_speed = printer["gcode_macro CHAMBER_REPORT"].exhaust_speed %}
  {% set max_chamber_cooldown_run_count = printer["gcode_macro global_vars"].max_chamber_cooldown_run_count %}
  {% if 'temperature_sensor chamber' in printer %}
    {% set current_chamber = printer["temperature_sensor chamber"].temperature|float %}
  {% elif 'heater_generic chamber' in printer %}
    {% set current_chamber = printer["heater_generic chamber"].temperature|float %}
  {% else %}
	{action_respond_info("[heater_generic / temperature_sensor] chamber does not exist")}  
  {% endif %}
  {% if exhaust_speed == 0 %}
    {action_respond_info("exhaust_speed configured to 0, skipping CHAMBER_COOLDOWN macro")} 
  {% elif 'fan_generic exhaust_fan' in printer %}
    {% if current_chamber < exhaust_off_chamber and printer["heater_bed"].temperature < exhaust_off_bed %}
      {action_respond_info("{0} | chamber: {1}/{2} | bed: {3}/{4}, turning off exhaust fan".format((chamber_run_count / 7), current_chamber, exhaust_off_chamber, printer["heater_bed"].temperature, exhaust_off_bed))}
	  {action_respond_info("target temperature reached, turning off CHAMBER_COOLDOWN macro")}
	  EXHAUST_FAN SPEED=0
	  CHAMBER_RESET
    {% elif chamber_run_count == max_chamber_cooldown_run_count %}							# 720 run count * 5 seconds per loop is 1 hour
      {action_respond_info("{0} | 2 hour timeout | turning off CHAMBER_COOLDOWN macro".format(chamber_run_count / 7))}
	  CHAMBER_RESET
    {% elif chamber_run_count == 0 %}
      {action_respond_info("delay CHAMBER_COOLDOWN {0} seconds".format(exhaust_delay))}
      G4 P{exhaust_delay * 1000}
      EXHAUST_FAN SPEED={exhaust_speed}
      CHAMBER_REPORT CURRENT_CHAMBER={current_chamber} EXHAUST_OFF_CHAMBER={exhaust_off_chamber} EXHAUST_OFF_BED={exhaust_off_bed}
	  UPDATE_DELAYED_GCODE ID=CHAMBER_COOLDOWN DURATION=5
    {% elif printer['fan_generic exhaust_fan'].speed != exhaust_speed %}
      {action_respond_info("exhaust_speed modified, turning off CHAMBER_COOLDOWN macro")}
	  CHAMBER_RESET
    {% else %}
      CHAMBER_REPORT CURRENT_CHAMBER={current_chamber} EXHAUST_OFF_CHAMBER={exhaust_off_chamber} EXHAUST_OFF_BED={exhaust_off_bed}
      UPDATE_DELAYED_GCODE ID=CHAMBER_COOLDOWN DURATION=5
	{% endif %}
  {% else %}
    {action_respond_info("exhaust_fan does not exist")}
    CHAMBER_RESET
  {% endif %}

[gcode_macro CHAMBER_REPORT]
description: "Reports on the bed and chamber temp of the printer, used in conjuction with CHAMBER_COOLDOWN in a loop."
variable_chamber_loop_count: 0
variable_exhaust_speed: 0
variable_exhaust_delay: 0
variable_chamber_run_count: 0
gcode:   
  {% set exhaust_off_chamber = params.EXHAUST_OFF_CHAMBER|default(35.0)|float %}
  {% set exhaust_off_bed = params.EXHAUST_OFF_BED|default(40.0)|float %}
  {% set current_chamber = params.CURRENT_CHAMBER|float %}
  SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=chamber_run_count VALUE={chamber_run_count + 1}
  {% if chamber_loop_count == 6 %}
    {action_respond_info("{0} | chamber: {1}/{2} | bed: {3}/{4}, continue running exhaust fan".format((chamber_run_count / 7)|int, current_chamber, exhaust_off_chamber, printer["heater_bed"].temperature, exhaust_off_bed))}
    SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=chamber_loop_count VALUE=0
  {% else %}
    SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=chamber_loop_count VALUE={chamber_loop_count + 1}
  {% endif %}

[gcode_macro EXHAUST_OFF]
description: Sets exhaust fan to speed 0.
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[gcode_macro CHAMBER_RESET]
description: "Resets all variables related to CHAMBER_COOLDOWN macro, cancels any current loop, and exhaust fan speed to 0%."
gcode:
  SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=chamber_loop_count VALUE=0
  SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=exhaust_speed VALUE=0
  SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=exhaust_delay VALUE=0
  SET_GCODE_VARIABLE MACRO=CHAMBER_REPORT VARIABLE=chamber_run_count VALUE=0
  UPDATE_DELAYED_GCODE ID=CHAMBER_COOLDOWN DURATION=0
  EXHAUST_FAN SPEED=0